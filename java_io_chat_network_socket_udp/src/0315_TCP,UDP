
[암기하기] TCP, UDP의 차이점 면접 질문(모바일분야)

TCP/IP(Tranmission Control Protocol / Internet Protocol)
Protocol : 컴퓨터 상호 간에 통신을 위한 규약

TCP/IP : 인터넷에서 사용하는 표준 프로토콜
	일반 사용자가 사용하는 통신 응용프로그램들은 대부분 응용계층에서 이루어짐
		
	응용계층 : HTTP /  FTP / TELENT 등
	전달계층 : TCP/UDP 								// 데이터 주고 받을 때
	인터넷계층 : IP										
	네트워크 인터페이스 계층 : device, driver 등 // 카드와 연결
	하드웨어 												// 인터넷 연결 시 카드 필요
------------------------------------------------------------------------------------------
TCP/UDP 
	TCP : 연결서 통신방식(전화), (UDP보다) 신뢰성 보장, 
	UDP : 비연결성 통화방식, (TCP보다) 신뢰성이 약하다.
			TCP보다 부하가 적다.
			패킷(전송할때쓰든 단위)단위로 전송, 모든 패킷은 목적지의 주소를 가져야 한다.
			
	Socket : 컴퓨터가 연결된 통신부분의 가장 끝지점을 의미.		
		데이터 통신
			송신 : 소켓의 데이터를 쓰기
			수신 : 소켓으로부터 데이터를 읽기
		소켓에 관련 클래스들은 java.net 패키지에서 제공
	Port : 하나의 컴퓨터에서 다수의 네트워크 프로그램을 
			서로 다른 포트를 사용하여 동시에 실행 가능하게 해주는 Gate 역할
	
	Java에서 제공하는 소켓관련 클래스			
		TCP기반 : SeverSocket / Socket
			SeverSocket : 서버측에서 실행되는 응용프로그램에서 사용(서버와 클라이언트 소켓 모두 사용)
				주요메서드
				accept() : 클라이언트 요청을 감지하여 받아들인 다음, Socket 객체를 반환.
				close(); : 서버소켓 종료.
				
			Socket : 클라이언트측에서 실행되는 응용프로그램에서 사용(클라이언트 소켓만 사용)
				주요메서드
				getOutputStream() : 현재 소켓과 관련된 OutputStream 객체를 반환
				getInetAddress() : 현재 연결된 컴퓨터 주소를 반환
				getLocalAddress() : 현재 소켓을 사용하고 있는 컴퓨터 주소를 반환
				getPort			() : 현재 소켓에 연결된 컴퓨터의 port 번호 반환
				getLocalPort	() : 현재 소켓이 사용하고 있는 port 번호 반환
				getInputStream() : 현재 소켓과 관련된 InputStream 객체를 반환
-------------------------------------------------------------------------------------------
	UDP(User Datagram Protocol)
	Java가 제공하는 클래스 
	
	DatagramPacket : 정보를 주고 받기 위해준비과정 등을 제공. (실제 정보를 다루는)
		주요 메서드
		getAddress() : 수신 응용프로그램에서 사용.
							정보를 보낸 컴퓨터의 주소를 반환
		getData()	 : 패킷으로부터 데이터를 읽어들여 바이트 배열로 반환
		getPort()		 : 패킷의 바이트 수를 반환
		setAddress() : ip를 주소로 설정
		setData()		: buffer의 내용 패킷 데이터로 설정
		setLength	: 패킷의 크기를 설정
		setPort()		: 포트번호를 설정
		
		DatagramSocket : 실제 정보를 주고받는 기능을 제공
			주요 메서드
			receive() : 현재 소켓으로부터 정보를 읽어 datagram 패킷에 저장
			send()	: 현재의 소켓을 통해 datagram을 패킷을 전송
			
				
				
				
				
									
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			